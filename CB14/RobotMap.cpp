// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.


#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"
#include "Wire.h"

//initialize everything
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
SpeedController* RobotMap::driveLeftDrive = NULL;
SpeedController* RobotMap::driveRightDrive = NULL;
RobotDrive* RobotMap::drivedriveTrain = NULL;
Encoder* RobotMap::driveenLeft = NULL;
Encoder* RobotMap::driveenRight = NULL;
Solenoid* RobotMap::driveswitchSol1 = NULL;
Solenoid* RobotMap::driveswitchSol2 = NULL;
Solenoid* RobotMap::clawtriggerSol1 = NULL;
Solenoid* RobotMap::clawtriggerSol2 = NULL;
DigitalInput* RobotMap::clawballSwitch = NULL;
DigitalInput* RobotMap::clawballinSwitch = NULL;
Solenoid* RobotMap::clawshooterSol1 = NULL;
Solenoid* RobotMap::clawshooterSol2 = NULL;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
Relay* RobotMap::armrollerrelay1 = NULL;
AnalogChannel* RobotMap::clawPot1 = NULL;
Compressor* RobotMap::compressor = NULL;
Solenoid* RobotMap::armSol1 = NULL;
Solenoid* RobotMap::armSol2 = NULL;
SpeedController* RobotMap::clawLifter = NULL;

void RobotMap::init() {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	LiveWindow* lw = LiveWindow::GetInstance();
	
	//first line shows where the thing is
	//second line adds it to live window for monitoring
	driveLeftDrive = new Talon(moduleONE, portLEFTDRIVE);
	lw->AddActuator("Drive", "LeftDrive", (Talon*) driveLeftDrive);
	
	driveRightDrive = new Talon(moduleONE, portRIGHTDRIVE);
	lw->AddActuator("Drive", "RightDrive", (Talon*) driveRightDrive);
	
	drivedriveTrain = new RobotDrive(driveLeftDrive, driveRightDrive);
	
	drivedriveTrain->SetSafetyEnabled(false);
        drivedriveTrain->SetExpiration(0.1);
        drivedriveTrain->SetSensitivity(0.5);
        drivedriveTrain->SetMaxOutput(1.0);

        drivedriveTrain->SetInvertedMotor(RobotDrive::kFrontRightMotor, false);
        drivedriveTrain->SetInvertedMotor(RobotDrive::kRearRightMotor, false);
        //drivedriveTrain->SetInvertedMotor(RobotDrive::)
	driveenLeft = new Encoder(moduleONE, ioDRIVEENCODERLEFTA, moduleONE, ioDRIVEENCODERLEFTB, false, Encoder::k4X);
	lw->AddSensor("Drive", "enLeft", driveenLeft);
	driveenLeft->SetDistancePerPulse(1.0);
        driveenLeft->SetPIDSourceParameter(Encoder::kRate);
        driveenLeft->Start();
	driveenRight = new Encoder(moduleONE, ioDRIVEENCODERRIGHTA, moduleONE, ioDRIVEENCODERRIGHTB, true, Encoder::k4X);
	lw->AddSensor("Drive", "enRight", driveenRight);
	driveenRight->SetDistancePerPulse(1.0);
        driveenRight->SetPIDSourceParameter(Encoder::kRate);
        driveenRight->Start();
	driveswitchSol1 = new Solenoid(moduleONE, portSHIFTHIGH);
	lw->AddActuator("Drive", "switchSol1", driveswitchSol1);
	
	driveswitchSol2 = new Solenoid(moduleONE, portSHIFTLOW);
	lw->AddActuator("Drive", "switchSol2", driveswitchSol2);
	
	clawLifter = new Talon(moduleONE, portCLAWLIFT);
		lw->AddActuator("Claw", "Lifter", (Victor*) clawLifter);
	
	clawtriggerSol1 = new Solenoid(moduleONE, portSHOOTTRIGGERIN);
	lw->AddActuator("Claw", "triggerSol1", clawtriggerSol1);
	
	clawtriggerSol2 = new Solenoid(moduleONE, portSHOOTTRIGGEROUT);
	lw->AddActuator("Claw", "triggerSol2", clawtriggerSol2);
	
	clawballSwitch = new DigitalInput(moduleONE, ioBALLSWITCH);
	lw->AddSensor("Claw", "ballSwitch", clawballSwitch);
	
	clawballinSwitch = new DigitalInput(moduleONE, ioBALLINSWITCH);
	lw->AddSensor("Claw", "ballinSwitch", clawballinSwitch);
	
	clawshooterSol1 = new Solenoid(moduleONE, portSHOOTPUSHIN);
	lw->AddActuator("Claw", "shooterSol1", clawshooterSol1);
	
	clawshooterSol2 = new Solenoid(moduleONE, portSHOOTPUSHOUT);
	lw->AddActuator("Claw", "shooterSol2", clawshooterSol2);
	

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	
	armrollerrelay1 = new Relay(moduleONE, portROLLER,Relay::kBothDirections);
	lw->AddActuator("Arm","rollerRelay1", armrollerrelay1);
	
	compressor = new Compressor(ioCOMPPRESSURESW,portCOMPRESSOR);
	
	//clawPot1 = new AnalogChannel(1, 1); 
	
	clawPot1 = new AnalogChannel(moduleONE, ioANALOGPOT);
	lw->AddSensor("Claw", "Pot1", clawPot1);
	
	armSol1 = new Solenoid(moduleONE, portINTAKEARMUP);
	lw->AddActuator("Arm", "Sol1", armSol1);
	
	armSol2 = new Solenoid(moduleONE, portINTAKEARMDOWN);
	lw->AddActuator("Arm", "Sol2", armSol2);
}
