// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.

#include "AutonomousCommand.h"
#include "../RobotMap.h"
#include "Fire.h"

bool hot = false;
Timer t;

AutonomousCommand::AutonomousCommand() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

// Called just before this Command runs the first time
void AutonomousCommand::Initialize() {
	t.Start();
	t.Reset();
	RobotMap::driveenLeft->Reset();
	RobotMap::driveenRight->Reset();
	RobotMap::drivebackLeftDrive->Set(.4);
	RobotMap::drivebackRightDrive->Set(-.4);
	RobotMap::drivefrontLeftDrive->Set(.4);
	RobotMap::drivefrontRightDrive->Set(-.4);
	
	if(RobotMap::driveenLeft->Get() < -4000 && RobotMap::driveenRight->Get() > 4000) {
		RobotMap::drivebackLeftDrive->Set(0);
		RobotMap::drivebackRightDrive->Set(0);
		RobotMap::drivefrontLeftDrive->Set(0);
		RobotMap::drivefrontRightDrive->Set(0);
		while(hot == false || t.Get()>5.0f) {
			
		}
		Robot::claw->fire();
			
	}
}

// Called repeatedly when this Command is scheduled to run
void AutonomousCommand::Execute() {
	
}


// Make this return true when this Command no longer needs to run execute()
bool AutonomousCommand::IsFinished() {
	return true;
}

// Called once after isFinished returns true
void AutonomousCommand::End() {
	
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void AutonomousCommand::Interrupted() {

}
