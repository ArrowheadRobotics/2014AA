// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.

#include "AutonomousCommand.h"
#include "../RobotMap.h"
#include "Fire.h"
#include "../Constants.h"

Timer t;

AutonomousCommand::AutonomousCommand() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

// Called just before this Command runs the first time
void AutonomousCommand::Initialize() {
	t.Start(); //starts timer
	t.Reset(); //resets timer to zero
	Robot::arm->roll1->Set(Relay::kReverse);
	RobotMap::armSol1->Set(false); //turns off sol to lower arm
	RobotMap::armSol2->Set(true);
	RobotMap::driveenLeft->Reset(); //resets left encoder
	RobotMap::driveenRight->Reset(); //resets right encoder
	RobotMap::driveLeftDrive->Set(FORWARDSPEED*-1); //turns right
	RobotMap::driveRightDrive->Set(FORWARDSPEED*1.15); //turns right faster
	
//	double d=-2*(1-((Robot::claw->pot1->GetValue()-POTBOTTOM)/(FIRINGPOINT-POTBOTTOM)));
	while(RobotMap::driveenLeft->Get() > ENCODERDISTANCE*-1 || RobotMap::driveenRight->Get() > ENCODERDISTANCE*-1) 
	{
		if(!Robot::claw->ballinSwitch->Get() && Robot::arm->roll1->Get()==Relay::kReverse)
		{
			Robot::arm->roll1->Set(Relay::kOff);
		}
//		if(RobotMap::driveenLeft->Get() <= ENCODERDISTANCE*-1)
//		{
//			RobotMap::driveLeftDrive->Set(STOPSPEED);
//		}
//		if(RobotMap::driveenRight->Get() <= ENCODERDISTANCE*-1)
//		{
//			RobotMap::driveRightDrive->Set(STOPSPEED);
//		}
		//printf("Left:%d		Right:%d\n",RobotMap::driveenLeft->Get(),RobotMap::driveenRight->Get());
//		while(Robot::claw->pot1->GetValue()!=FIRINGPOINT && !Robot::oi->getjoythumb1()->Get())
//		{
//			d=-2*(1-((Robot::claw->pot1->GetValue()-POTBOTTOM)/(FIRINGPOINT-POTBOTTOM)));
//			Robot::claw->lifter->Set(d);
//			if(d<0.05f && d>-0.05f)
//			{
//				d=0;
//			}
//		}
	} //if the robot has turned enough
	Robot::arm->roll1->Set(Relay::kOff);
	RobotMap::driveLeftDrive->Set(STOPSPEED); //stop turning
	RobotMap::driveRightDrive->Set(STOPSPEED); //stop turning
	//double i=-2*(1-((Robot::claw->pot1->GetValue()-POTBOTTOM)/(FIRINGPOINT-POTBOTTOM)));
	Robot::claw->lifter->Set(DOWNSPEED);
	while(Robot::claw->pot1->GetValue()<430)
	{
		
	}
	Robot::claw->lifter->Set(STOPSPEED);
	
	while(Robot::claw->pot1->GetValue()!=FIRINGPOINT && !Robot::oi->getjoythumb1()->Get())
	{
		if(!Robot::claw->ballinSwitch->Get() && Robot::arm->roll1->Get()==Relay::kReverse)
		{
			Robot::arm->roll1->Set(Relay::kOff);
		}
		//i=-2*(1-((Robot::claw->pot1->GetValue()-POTBOTTOM)/(FIRINGPOINT-POTBOTTOM)));
		Robot::claw->lifter->Set(-2*(1-((Robot::claw->pot1->GetValue()-POTBOTTOM)/(400-POTBOTTOM))));
		printf("%d\n",Robot::claw->pot1->GetValue());
	}
	Robot::claw->lifter->Set(STOPSPEED);
	//while(Robot::Hot == false && t.Get()<HALFAUTO) { //wait for hot to be true or until five seconds pass
	//	
	//}
	Robot::claw->fire(); //execute fire command
}

// Called repeatedly when this Command is scheduled to run
void AutonomousCommand::Execute() {
	
}


// Make this return true when this Command no longer needs to run execute()
bool AutonomousCommand::IsFinished() {
	return true;
}

// Called once after isFinished returns true
void AutonomousCommand::End() {
	
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void AutonomousCommand::Interrupted() {
	
}

