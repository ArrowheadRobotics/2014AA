// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.


#include "TankDrive.h"
#include "../Subsystems/Drive.h"
#include "../Constants.h"


int ctr=0;

TankDrive::TankDrive() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::drive);
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

// Called just before this Command runs the first time
void TankDrive::Initialize() {

}

// Called repeatedly when this Command is scheduled to run
void TankDrive::Execute() {
	Robot::drive->M_Drive(Robot::oi->getjoy1(), Robot::oi->getjoy2()); //run the M_Drive command
	printf("%d\n",Robot::claw->pot1->GetValue());
	printf("%f\n",-1*(1-((Robot::claw->pot1->GetValue()-POTBOTTOM)/(440-POTBOTTOM))));
	//printf("%d\n",Robot::claw->ballinSwitch->Get());
	ctr++;
	printf("Left:%d		Right:%d\n",Robot::drive->enLeft->GetRaw(),Robot::drive->enRight->GetRaw());
	//printf("%s\n",Robot::Hot);
	//printf("%f\n",Robot::oi->getjoyPad()->GetAxis(Joystick::kThrottleAxis));
	if(Robot::oi->getjoyPad()->GetAxis(Joystick::kThrottleAxis)>0.5f)
	{
		Robot::arm->roll1->Set(Relay::kForward);
	}
	else if(Robot::oi->getjoyPad()->GetAxis(Joystick::kThrottleAxis)<-0.5f)
	{
		Robot::arm->roll1->Set(Relay::kReverse);
	}
	else
	{
		Robot::arm->roll1->Set(Relay::kOff);
	}
	if(!Robot::claw->ballinSwitch->Get() && Robot::arm->roll1->Get()==Relay::kReverse && ctr%10==0)
	{
		Robot::arm->roll1->Set(Relay::kOff);
//		RobotMap::clawarmSol->Set(false);
	}
	if(!Robot::claw->ballinSwitch->Get())
	{
		//RobotMap::clawarmSol->Set(false);
	}
}

// Make this return true when this Command no longer needs to run execute()
bool TankDrive::IsFinished() {
	return false;
}

// Called once after isFinished returns true
void TankDrive::End() {
	
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void TankDrive::Interrupted() {

}
