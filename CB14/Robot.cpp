// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.


#include "Robot.h"
#include "NetworkTables/NetworkTable.h"
#include "RobotMap.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
Drive* Robot::drive = 0;
Claw* Robot::claw = 0;
Arm* Robot::arm = 0;
OI* Robot::oi = 0;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
NetworkTable* Robot::table = 0;

Timer a;

void Robot::RobotInit() {
	RobotMap::init();
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	drive = new Drive(); //simplify subsystems
	claw = new Claw();
	arm = new Arm();
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	table = NetworkTable::GetTable("SmartDashboard");
	// This MUST be here. If the OI creates Commands (which it very likely
	// will), constructing it during the construction of CommandBase (from
	// which commands extend), subsystems are not guaranteed to be
	// yet. Thus, their requires() statements may grab null pointers. Bad
	// news. Don't move it.
	oi = new OI();
	lw = LiveWindow::GetInstance();

	// instantiate the command used for the autonomous period
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	autonomousCommand = new AutonomousCommand();
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	RobotMap::compressor->Start();
	RobotMap::led->Set(Relay::kOn);
	a.Start();
	a.Reset();
  }
	
void Robot::AutonomousInit() {
	if (autonomousCommand != NULL) //if the autonomous command exists upon startup
		autonomousCommand->Start(); //run it
}
	
void Robot::AutonomousPeriodic() {
	Scheduler::GetInstance()->Run();
}
	
void Robot::TeleopInit() {
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to 
	// continue until interrupted by another command, remove
	// this line or comment it out.
	autonomousCommand->Cancel();
	//printf("Testing\n");
	autonomousCommand->Cancel(); //end autonomous at start of teleop period
}
	
void Robot::TeleopPeriodic() {
	if (autonomousCommand != NULL)
		Scheduler::GetInstance()->Run();
	if(a.Get() >= 140) {
		if((a.Get() >= 140 && a.Get() < 141) || (a.Get() >= 142 && a.Get() < 143) || (a.Get() >= 144 && a.Get() < 145) || (a.Get() >= 146 && a.Get() < 147) || (a.Get() >= 148 && a.Get() < 149)) {
			RobotMap::led->Set(Relay::kOff);
		}
		else {
			RobotMap::led->Set(Relay::kOn);
		}
	}
//	try
//	{
//		string val = "Hot";
//		Robot::Hot = Robot::table->GetBoolean(val);
//	}
//	catch(exception& e)
//	{
//		printf("crashed %s", e.what());
//	}
}

void Robot::TestPeriodic() {
	lw->Run();
}

START_ROBOT_CLASS(Robot);

